name: UserServiceCI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    name: Build and analyze
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/SubsTracker.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Run Analysis (Begin, Build, Test, End)
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PR_KEY: ${{ github.event.pull_request.number }}
          PR_BRANCH: ${{ github.head_ref }}
          PR_BASE: ${{ github.base_ref }}
          
        run: |
          $SCANNER_ARGS = ""
          
          if ([string]::IsNullOrWhiteSpace($env:PR_KEY) -ne $true) {
              Write-Host ">>> Running Pull Request analysis for PR #$env:PR_KEY"
              $SCANNER_ARGS = "/d:sonar.pullrequest.key=$env:PR_KEY /d:sonar.pullrequest.branch=$env:PR_BRANCH /d:sonar.pullrequest.base=$env:PR_BASE"
          } 
          else {
              Write-Host ">>> Running Main Branch analysis."
              $SCANNER_ARGS = "/d:sonar.branch.name=${{ github.ref_name }}"
          }

          dotnet sonarscanner begin `
            /k:"AndrodenBY_SubsTracker" `
            /o:"androdenby" `
            /d:sonar.login="$env:SONAR_TOKEN" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.scm.revision="${{ github.sha }}" `
            $SCANNER_ARGS
          
          dotnet restore SubsTracker.sln
          dotnet build SubsTracker.sln --no-restore --configuration Release
          
          dotnet test SubsTracker.sln `
            --no-build `
            --configuration Release `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=OpenCover `
            /p:CoverletOutput=./coverage/coverage.opencover.xml
            
          dotnet sonarscanner end /d:sonar.login="$env:SONAR_TOKEN"
